{"mappings":"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","sources":["src/index.js","src/js/keyMovieFetch.js","src/js/keyMovieQuery.js","src/js/backToTop.js"],"sourcesContent":["import './js/gallery-popular-films';\nimport { loader } from './js/loader';\nimport './js/teamModal.js';\n// import { modal_film } from './js/modal-film';\nimport { fetch } from './js/fetch-movie';\nimport { pagination } from './js/pagination';\nimport { keyMovieQuery } from './js/keyMovieQuery';\nimport './js/backToTop';\nimport './js/btn-in-modal';\nimport { darkOn } from './js/darkOn';\n","import axios from 'axios';\n\nconst URL_KEY = 'd2c21f22a2d4ccc40e22a6b0b1329764';\n\nexport default class KeyMovieFetch {\n  constructor() {\n    this.inputValue = '';\n    this.page = 1;\n    this.genres = '';\n    // this.per_page = 40;\n    // this.summaryHits = 0;\n    // this.loadMore = document.querySelector('.load-more__btn');\n  }\n\n  async fetchMovie() {\n    try {\n      const url = 'https://api.themoviedb.org/3/search/movie/';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n          query: this.inputValue,\n          page: this.page,\n        },\n      });\n      this.incrementPage();\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getGenre() {\n    try {\n      const url =\n        'https://api.themoviedb.org/3/genre/movie/list?&language=en-US`';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get value() {\n    return this.inputValue;\n  }\n  set value(newValue) {\n    this.inputValue = newValue;\n  }\n}\n","import KeyMovieFetch from './keyMovieFetch';\nimport { addToHTML } from './gallery-popular-films';\nimport { GENRES_FULL_INFO } from './gallery-popular-films';\nimport { pagination } from './pagination';\n\nconst refs = {\n  searchForm: document.querySelector('.header-search-form'),\n  gallery: document.querySelector('.gallery'),\n  searchMessage: document.querySelector('.header-message'),\n  page: document.querySelector('a[data-page=\"home\"]'),\n  paginationCont: document.getElementById('tui-pagination-container'),\n  // loadMoreBtn: document.querySelector('.load-more'),\n};\n\nlet total_films;\nconst keyMovieFetch = new KeyMovieFetch();\n\nrefs.searchForm.addEventListener('submit', onSearchSubmit);\n// // refs.loadMoreBtn.addEventListener('click', onLoadMoreClick);\n\nasync function onSearchSubmit(evt) {\n  try {\n    evt.preventDefault();\n    evt.stopPropagation();\n    refs.paginationCont.classList.remove('is-hidden');\n    refs.gallery.innerHTML = '';\n    keyMovieFetch.resetPage();\n    console.log(evt.currentTarget.elements.searchQuery.value);\n    keyMovieFetch.value = evt.currentTarget.elements.searchQuery.value;\n    if (keyMovieFetch.value === '') {\n      //   refs.loadMoreBtn.classList.add('is-hidden');\n      refs.searchMessage.classList.remove('is-hidden');\n      refs.paginationCont.classList.add('is-hidden');\n\n      refs.searchMessage.innerHTML =\n        'I can`t find an empty request. Please input something.';\n      // console.log('I can`t find an empty request. Please input something.');\n      refs.gallery.innerHTML = '';\n      return;\n    }\n    if (keyMovieFetch.value !== '') {\n      const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n      console.log('fetch', fetch);\n      total_films = fetch.total_results;\n      console.log(total_films);\n      pagination.reset(total_films);\n\n      await createMarkupKey(fetch);\n      // console.log(fetch);\n    }\n    if (total_films === 0) {\n      refs.searchMessage.classList.remove('is-hidden');\n      refs.paginationCont.classList.add('is-hidden');\n      refs.searchMessage.innerHTML =\n        'Search result not successful. Enter the correct movie name and try again.';\n      refs.gallery.innerHTML = '';\n      return;\n    }\n    // refs.loadMoreBtn.classList.remove('is-hidden');\n\n    evt.target.reset();\n  } catch (error) {\n    // refs.loadMoreBtn.classList.add('is-hidden');\n    console.log(error);\n  }\n}\n\n// if (refs.page.classList.contains('header-list__link--current')) {\n//   onLoadMore();\n// }\n\n// async function onLoadMore() {\n//   await renderGallery();\n//   // console.log('gallery in onloadmore', gallery);\n//   // pagination.reset(total_films);\n// }\n\nasync function renderGalleryKey() {\n  // refs.gallery.innerHTML = '';\n  if (keyMovieFetch.value !== '') {\n    const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n    console.log('fetch in render', fetch);\n    await createMarkupKey(fetch);\n    // pagination.reset(fetch.total_results);\n    // pagination.reset(total_films);\n  } else return;\n}\n\nfunction matchGenres(genreIdArr, genresFool) {\n  let result = [];\n\n  genreIdArr.forEach(genreId => {\n    const matchGenre = genresFool.find(genre => genreId === genre.id);\n\n    if (matchGenre) {\n      result.push(matchGenre.name);\n    }\n  });\n  return result;\n}\n\nasync function createMarkupKey(data) {\n  refs.gallery.innerHTML = '';\n  refs.searchMessage.classList.add('is-hidden');\n\n  //   const films = data.results;\n  console.log();\n  const markup = data.results\n    .map(({ id, poster_path, title, release_date, genre_ids }) => {\n      const year = release_date.slice(0, 4);\n      const genresName = matchGenres(genre_ids, GENRES_FULL_INFO);\n      return `\n      <li class=\"card-set__item\" id=\"${id}\">\n      <a href='#' id='${id}' class=\"card-link\">\n      <picture>\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w780/${poster_path} 1x,\n                   http://image.tmdb.org/t/p/original/${poster_path} 2x\" media=\"(min-width: 1280px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w342/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w500/${poster_path} 2x\" media=\"(min-width: 768px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w185/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w342/${poster_path} 2x\" media=\"(max-width: 480px)\" type=\"image/jpeg\" />\n         <img id=\"${id}\n          loading=\"lazy\"\n          src=\"http://image.tmdb.org/t/p/w342/${poster_path}\"\n          alt=\"${title}\"\n          class=\"card-set__img \"/>\n      </picture>\n     \n      <h3 class=\"card-set__title\">${title}</h3>\n      <div class=\"card-set__description\" id=\"${id}\">\n      <span class=\"card-set__genre\" id=\"${id}\"> ${genresName.join(\n        ', '\n      )} &nbsp| ${year}</span>\n        </div>\n      </a>\n      </li>\n      `;\n    })\n    .join('');\n  addToHTML(markup);\n}\n\npagination.on('afterMove', event => {\n  const currentPage = event.page;\n  console.log(currentPage);\n  console.log(keyMovieFetch.page);\n  keyMovieFetch.page = currentPage;\n  renderGalleryKey();\n});\n","const mybutton = document.querySelector('.back-to-top');\nmybutton.addEventListener('click', topFunction);\n\nwindow.onscroll = function () {\n  scrollFunction();\n};\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n    mybutton.style.display = 'block';\n  } else {\n    mybutton.style.display = 'none';\n  }\n}\n\nfunction topFunction() {\n  // document.body.scrollTop = 0;\n  // document.documentElement.scrollTop = 0;\n\n  document.body.scrollIntoView({\n    behavior: 'smooth',\n  });\n}\n"],"names":["parcelRequire","$2shzp","$c7d4165db1f0c6aa$var$refs","searchForm","document","querySelector","gallery","searchMessage","page","paginationCont","getElementById","$c7d4165db1f0c6aa$var$total_films","$c7d4165db1f0c6aa$var$keyMovieFetch","async","url","response","$parcel$interopDefault","get","params","api_key","query","this","inputValue","incrementPage","data","error","console","log","message","resetPage","value","newValue","constructor","genres","$c7d4165db1f0c6aa$var$createMarkupKey","innerHTML","classList","add","markup","results","map","id","poster_path","title","release_date","genre_ids","year","slice","genreIdArr","genresFool","result","forEach","genreId","matchGenre","find","genre","push","name","$c7d4165db1f0c6aa$var$matchGenres","$eZevs","GENRES_FULL_INFO","join","addToHTML","addEventListener","evt","preventDefault","stopPropagation","remove","currentTarget","elements","searchQuery","fetch","fetchMovie","total_results","$2nhTy","pagination","reset","target","on","event","currentPage","$c7d4165db1f0c6aa$var$renderGalleryKey","$7a1cc1cb5a5b8b76$var$mybutton","body","scrollIntoView","behavior","window","onscroll","scrollTop","documentElement","style","display"],"version":3,"file":"index.4d817bca.js.map"}