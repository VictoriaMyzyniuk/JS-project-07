{"mappings":"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","sources":["src/index.js","src/js/keyMovieQuery.js","src/js/keyMovieFetch.js","<<jsx-config-pragma.js>>","src/js/backToTop.js"],"sourcesContent":["import './js/gallery-popular-films';\nimport { loader } from './js/loader';\nimport './js/teamModal.js';\n// import { modal_film } from './js/modal-film';\nimport { fetch } from './js/fetch-movie';\nimport { pagination } from './js/pagination';\nimport { keyMovieQuery } from './js/keyMovieQuery';\nimport './js/backToTop';\nimport './js/btn-in-modal';\nimport { darkOn } from './js/darkOn';\n","import KeyMovieFetch from './keyMovieFetch';\nimport { addToHTML } from './gallery-popular-films';\nimport { GENRES_FULL_INFO } from './gallery-popular-films';\nimport { pagination } from './pagination';\n\nconst refs = {\n  searchForm: document.querySelector('.header-search-form'),\n  gallery: document.querySelector('.gallery'),\n  searchMessage: document.querySelector('.header-message'),\n  page: document.querySelector('a[data-page=\"home\"]'),\n  paginationCont: document.getElementById('tui-pagination-container'),\n  // loadMoreBtn: document.querySelector('.load-more'),\n};\n\nlet total_films;\nconst keyMovieFetch = new KeyMovieFetch();\n\nrefs.searchForm.addEventListener('submit', onSearchSubmit);\n// // refs.loadMoreBtn.addEventListener('click', onLoadMoreClick);\n\nasync function onSearchSubmit(evt) {\n  try {\n    evt.preventDefault();\n    evt.stopPropagation();\n    refs.paginationCont.classList.remove('is-hidden');\n    refs.gallery.innerHTML = '';\n    keyMovieFetch.resetPage();\n    console.log(evt.currentTarget.elements.searchQuery.value);\n    keyMovieFetch.value = evt.currentTarget.elements.searchQuery.value;\n    if (keyMovieFetch.value === '') {\n      //   refs.loadMoreBtn.classList.add('is-hidden');\n      refs.searchMessage.classList.remove('is-hidden');\n      refs.paginationCont.classList.add('is-hidden');\n\n      refs.searchMessage.innerHTML =\n        'I can`t find an empty request. Please input something.';\n      // console.log('I can`t find an empty request. Please input something.');\n      refs.gallery.innerHTML = '';\n      return;\n    }\n    if (keyMovieFetch.value !== '') {\n      const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n      console.log('fetch', fetch);\n      total_films = fetch.total_results;\n      console.log(total_films);\n      pagination.reset(total_films);\n\n      await createMarkupKey(fetch);\n      // console.log(fetch);\n    }\n    if (total_films === 0) {\n      refs.searchMessage.classList.remove('is-hidden');\n      refs.paginationCont.classList.add('is-hidden');\n      refs.searchMessage.innerHTML =\n        'Search result not successful. Enter the correct movie name and try again.';\n      refs.gallery.innerHTML = '';\n      return;\n    }\n    // refs.loadMoreBtn.classList.remove('is-hidden');\n\n    evt.target.reset();\n  } catch (error) {\n    // refs.loadMoreBtn.classList.add('is-hidden');\n    console.log(error);\n  }\n}\n\n// if (refs.page.classList.contains('header-list__link--current')) {\n//   onLoadMore();\n// }\n\n// async function onLoadMore() {\n//   await renderGallery();\n//   // console.log('gallery in onloadmore', gallery);\n//   // pagination.reset(total_films);\n// }\n\nasync function renderGalleryKey() {\n  // refs.gallery.innerHTML = '';\n  if (keyMovieFetch.value !== '') {\n    const fetch = await keyMovieFetch.fetchMovie(keyMovieFetch.value);\n    console.log('fetch in render', fetch);\n    await createMarkupKey(fetch);\n    // pagination.reset(fetch.total_results);\n    // pagination.reset(total_films);\n  } else return;\n}\n\nfunction matchGenres(genreIdArr, genresFool) {\n  let result = [];\n\n  genreIdArr.forEach(genreId => {\n    const matchGenre = genresFool.find(genre => genreId === genre.id);\n\n    if (matchGenre) {\n      result.push(matchGenre.name);\n    }\n  });\n  return result;\n}\n\nasync function createMarkupKey(data) {\n  refs.gallery.innerHTML = '';\n  refs.searchMessage.classList.add('is-hidden');\n\n  //   const films = data.results;\n  console.log();\n  const markup = data.results\n    .map(({ id, poster_path, title, release_date, genre_ids }) => {\n      const year = release_date.slice(0, 4);\n      const genresName = matchGenres(genre_ids, GENRES_FULL_INFO);\n      return `\n      <li class=\"card-set__item\" id=\"${id}\">\n      <a href='#' id='${id}' class=\"card-link\">\n      <picture>\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w780/${poster_path} 1x,\n                   http://image.tmdb.org/t/p/original/${poster_path} 2x\" media=\"(min-width: 1280px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w342/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w500/${poster_path} 2x\" media=\"(min-width: 768px)\" type=\"image/jpeg\" />\n                    <source srcset=\"\n                    http://image.tmdb.org/t/p/w185/${poster_path} 1x,\n                    http://image.tmdb.org/t/p/w342/${poster_path} 2x\" media=\"(max-width: 480px)\" type=\"image/jpeg\" />\n         <img id=\"${id}\n          loading=\"lazy\"\n          src=\"http://image.tmdb.org/t/p/w342/${poster_path}\"\n          alt=\"${title}\"\n          class=\"card-set__img \"/>\n      </picture>\n     \n      <h3 class=\"card-set__title\">${title}</h3>\n      <div class=\"card-set__description\" id=\"${id}\">\n      <span class=\"card-set__genre\" id=\"${id}\"> ${genresName.join(\n        ', '\n      )} &nbsp| ${year}</span>\n        </div>\n      </a>\n      </li>\n      `;\n    })\n    .join('');\n  addToHTML(markup);\n}\n\npagination.on('afterMove', event => {\n  const currentPage = event.page;\n  console.log(currentPage);\n  console.log(keyMovieFetch.page);\n  keyMovieFetch.page = currentPage;\n  renderGalleryKey();\n});\n","import axios from 'axios';\n\nconst URL_KEY = 'd2c21f22a2d4ccc40e22a6b0b1329764';\n\nexport default class KeyMovieFetch {\n  constructor() {\n    this.inputValue = '';\n    this.page = 1;\n    this.genres = '';\n    // this.per_page = 40;\n    // this.summaryHits = 0;\n    // this.loadMore = document.querySelector('.load-more__btn');\n  }\n\n  async fetchMovie() {\n    try {\n      const url = 'https://api.themoviedb.org/3/search/movie/';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n          query: this.inputValue,\n          page: this.page,\n        },\n      });\n      this.incrementPage();\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  async getGenre() {\n    try {\n      const url =\n        'https://api.themoviedb.org/3/genre/movie/list?&language=en-US`';\n      //   this.loadMore.classList.add('is-hidden');\n      const response = await axios.get(url, {\n        params: {\n          api_key: URL_KEY,\n        },\n      });\n      return response.data;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get value() {\n    return this.inputValue;\n  }\n  set value(newValue) {\n    this.inputValue = newValue;\n  }\n}\n",null,"const mybutton = document.querySelector('.back-to-top');\nmybutton.addEventListener('click', topFunction);\n\nwindow.onscroll = function () {\n  scrollFunction();\n};\n\nfunction scrollFunction() {\n  if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {\n    mybutton.style.display = 'block';\n  } else {\n    mybutton.style.display = 'none';\n  }\n}\n\nfunction topFunction() {\n  // document.body.scrollTop = 0;\n  // document.documentElement.scrollTop = 0;\n\n  document.body.scrollIntoView({\n    behavior: 'smooth',\n  });\n}\n"],"names":["parcelRequire","$7d7a82d83cf4dcfc$var$total_films","$bpxeT","$115ae4e0f3758354$var$URL_KEY","$115ae4e0f3758354$export$2e2bcd8739ae039","KeyMovieFetch","this","inputValue","page","genres","key","$parcel$interopDefault","$2TvXO","mark","_callee","response","$dIxxU","get","params","api_key","query","_this","_ctx","sent","incrementPage","data","console","log","t0","message","newValue","$7d7a82d83cf4dcfc$var$refs","searchForm","document","querySelector","gallery","searchMessage","paginationCont","getElementById","$7d7a82d83cf4dcfc$var$keyMovieFetch","$7d7a82d83cf4dcfc$var$_onSearchSubmit","evt","fetch","preventDefault","stopPropagation","classList","remove","innerHTML","resetPage","currentTarget","elements","searchQuery","value","add","fetchMovie","total_results","$jcFG7","pagination","reset","$7d7a82d83cf4dcfc$var$createMarkupKey","target","apply","arguments","$7d7a82d83cf4dcfc$var$_renderGalleryKey","$7d7a82d83cf4dcfc$var$matchGenres","genreIdArr","genresFool","result","forEach","genreId","matchGenre","find","genre","id","push","name","$7d7a82d83cf4dcfc$var$_createMarkupKey","markup","results","map","param","poster_path","title","release_date","genre_ids","year","slice","genresName","$3xVQP","GENRES_FULL_INFO","concat","join","addToHTML","addEventListener","on","event","currentPage","$7d7a82d83cf4dcfc$var$renderGalleryKey","$c3a37a8f68db6f41$var$mybutton","body","scrollIntoView","behavior","window","onscroll","scrollTop","documentElement","style","display"],"version":3,"file":"index.7cd1fca6.js.map"}